name: Node.js CI/CD

on:
  push:
    branches: ['main']
  pull_request:
    branches: ['main']

jobs:
  CI:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [16.x]

    # Service containers to run with `container-job`
    services:
      # Label used to access the service container
      redis:
        # Docker Hub image
        image: redis
        # Set health checks to wait until redis has started
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          # Maps port 6379 on service container to the host
          - 6379:6379

    steps:
      - uses: actions/checkout@v3
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      # set Env variables by using Github Repository Secrets
      - name: Generate Environment Variables File for Production
        run: |
          mkdir env
          echo "DATABASE_URL=$DATABASE_URL" >> env/.production.env
          echo "DATABASE_URL=$DATABASE_URL" >> .env
          echo "JWT_ACCESS_SECRET=$JWT_ACCESS_SECRET" >> env/.production.env
          echo "JWT_REFRESH_SECRET=$JWT_REFRESH_SECRET" >> env/.production.env
          echo "CACHE_TTL=$CACHE_TTL" >> env/.production.env
          echo "REDIS_URL=$REDIS_URL" >> env/.production.env
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          JWT_ACCESS_SECRET: ${{ secrets.JWT_ACCESS_SECRET }}
          JWT_REFRESH_SECRET: ${{ secrets.JWT_REFRESH_SECRET }}
          CACHE_TTL: ${{ secrets.CACHE_TTL }}
          REDIS_URL: ${{ secrets.REDIS_URL }}
          NODE_ENV: production

      - name: Cache node modules
        uses: actions/cache@v2
        id: cache
        with:
          path: node_modules
          key: npm-packages-${{ hashFiles('**/package-lock.json') }}

      - name: Install Dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: npm ci

      - run: npm run generate:prod
      - run: npm run build --if-present
        if: always()
      - run: npm run lint
        if: always()
      - run: npm test
        if: always()
        env:
          NODE_ENV: production

  CD:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [16.x]

    steps:
      - uses: actions/checkout@v3
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_ACCESS_TOKEN }}

      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/nest-api:latest

      - name: Deploy to prod
        uses: appleboy/ssh-action@master
        id: deploy-prod
        with:
          host: ${{ secrets.HOST_PROD }}
          username: ${{ secrets.USERNAME }}
          password: ${{ secrets.PASSWORD }}
          port: 22
          script: |
            sudo docker rm -f $(docker ps -qa)
            sudo docker pull ${{ secrets.DOCKER_REPO }}/nest-api
            docker-compose up -d
            docker image prune -f

      - name: action-slack
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          author_name: Nestjs toy project - prod
          fields: repo,commit,message,author # action,eventName,ref,workflow,job,took 추가할 수 있음
          mention: here
          if_mention: failure,cancelled
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }} # required
        if: always()
